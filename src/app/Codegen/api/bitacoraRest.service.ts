/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Bitacora } from '../model/bitacora';
import { ResponseEntity } from '../model/responseEntity';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BitacoraRestService {

    protected basePath = '//localhost:8090/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * listBinnaclesById_laboratorio
     * 
     * @param idLaboratorio idLaboratorio
     * @param nombre nombre
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listBinnaclesByIdLaboratorioUsingGET(idLaboratorio?: number, nombre?: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseEntity>;
    public listBinnaclesByIdLaboratorioUsingGET(idLaboratorio?: number, nombre?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseEntity>>;
    public listBinnaclesByIdLaboratorioUsingGET(idLaboratorio?: number, nombre?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseEntity>>;
    public listBinnaclesByIdLaboratorioUsingGET(idLaboratorio?: number, nombre?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idLaboratorio !== undefined && idLaboratorio !== null) {
            queryParameters = queryParameters.set('idLaboratorio', <any>idLaboratorio);
        }
        if (nombre !== undefined && nombre !== null) {
            queryParameters = queryParameters.set('nombre', <any>nombre);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseEntity>('get',`${this.basePath}/bitacora/list/binnacles/${encodeURIComponent(String(idLaboratorio))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listBinnaclesBySpecificsBinacle2
     * 
     * @param idLaboratorio idLaboratorio
     * @param nombreEquipo nombreEquipo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listBinnaclesBySpecificsBinacle2UsingGET(idLaboratorio?: number, nombreEquipo?: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseEntity>;
    public listBinnaclesBySpecificsBinacle2UsingGET(idLaboratorio?: number, nombreEquipo?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseEntity>>;
    public listBinnaclesBySpecificsBinacle2UsingGET(idLaboratorio?: number, nombreEquipo?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseEntity>>;
    public listBinnaclesBySpecificsBinacle2UsingGET(idLaboratorio?: number, nombreEquipo?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idLaboratorio !== undefined && idLaboratorio !== null) {
            queryParameters = queryParameters.set('idLaboratorio', <any>idLaboratorio);
        }
        if (nombreEquipo !== undefined && nombreEquipo !== null) {
            queryParameters = queryParameters.set('nombreEquipo', <any>nombreEquipo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseEntity>('get',`${this.basePath}/bitacora/list/prueba2/binnacles/equipmentname/${encodeURIComponent(String(nombreEquipo))}/laboratorio/${encodeURIComponent(String(idLaboratorio))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listBinnaclesBySpecificsBinacle3
     * 
     * @param fecha fecha
     * @param idLaboratorio idLaboratorio
     * @param nombreEquipo nombreEquipo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listBinnaclesBySpecificsBinacle3UsingGET(fecha?: Date, idLaboratorio?: number, nombreEquipo?: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseEntity>;
    public listBinnaclesBySpecificsBinacle3UsingGET(fecha?: Date, idLaboratorio?: number, nombreEquipo?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseEntity>>;
    public listBinnaclesBySpecificsBinacle3UsingGET(fecha?: Date, idLaboratorio?: number, nombreEquipo?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseEntity>>;
    public listBinnaclesBySpecificsBinacle3UsingGET(fecha?: Date, idLaboratorio?: number, nombreEquipo?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (fecha !== undefined && fecha !== null) {
            queryParameters = queryParameters.set('fecha', <any>fecha.toISOString());
        }
        if (idLaboratorio !== undefined && idLaboratorio !== null) {
            queryParameters = queryParameters.set('idLaboratorio', <any>idLaboratorio);
        }
        if (nombreEquipo !== undefined && nombreEquipo !== null) {
            queryParameters = queryParameters.set('nombreEquipo', <any>nombreEquipo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseEntity>('get',`${this.basePath}/bitacora/list/prueba3/binnacles/fecha${encodeURIComponent(String())}/equipmentname/${encodeURIComponent(String(nombreEquipo))}/laboratorio/${encodeURIComponent(String(idLaboratorio))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listBinnaclesBySpecificsBinacle
     * 
     * @param fecha fecha
     * @param idLaboratorio idLaboratorio
     * @param nombreEquipo nombreEquipo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listBinnaclesBySpecificsBinacleUsingGET(fecha?: string, idLaboratorio?: number, nombreEquipo?: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseEntity>;
    public listBinnaclesBySpecificsBinacleUsingGET(fecha?: string, idLaboratorio?: number, nombreEquipo?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseEntity>>;
    public listBinnaclesBySpecificsBinacleUsingGET(fecha?: string, idLaboratorio?: number, nombreEquipo?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseEntity>>;
    public listBinnaclesBySpecificsBinacleUsingGET(fecha?: string, idLaboratorio?: number, nombreEquipo?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (fecha !== undefined && fecha !== null) {
            queryParameters = queryParameters.set('fecha', <any>fecha);
        }
        if (idLaboratorio !== undefined && idLaboratorio !== null) {
            queryParameters = queryParameters.set('idLaboratorio', <any>idLaboratorio);
        }
        if (nombreEquipo !== undefined && nombreEquipo !== null) {
            queryParameters = queryParameters.set('nombreEquipo', <any>nombreEquipo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseEntity>('get',`${this.basePath}/bitacora/list/prueba/binnacles/fecha${encodeURIComponent(String(fecha))}/equipmentname/${encodeURIComponent(String(nombreEquipo))}/laboratorio/${encodeURIComponent(String(idLaboratorio))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listBinnacles
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listBinnaclesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<ResponseEntity>;
    public listBinnaclesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseEntity>>;
    public listBinnaclesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseEntity>>;
    public listBinnaclesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseEntity>('get',`${this.basePath}/bitacora/list`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveBinnacle
     * 
     * @param body bitacora
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveBinnacleUsingPOST(body: Bitacora, observe?: 'body', reportProgress?: boolean): Observable<ResponseEntity>;
    public saveBinnacleUsingPOST(body: Bitacora, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseEntity>>;
    public saveBinnacleUsingPOST(body: Bitacora, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseEntity>>;
    public saveBinnacleUsingPOST(body: Bitacora, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling saveBinnacleUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ResponseEntity>('post',`${this.basePath}/bitacora/save`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
